base_images:
  ocp_builder_rhel-8-golang-1.20-openshift-4.14:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.20-openshift-4.14
build_root:
  image_stream_tag:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.20-openshift-4.14
images:
- dockerfile_literal: |-
    # Dockerfile to bootstrap build and test in openshift-ci
    FROM registry.ci.openshift.org/ocp/builder:rhel-8-golang-1.20-openshift-4.14 as builder

    ENV GOFLAGS ""

    RUN go install github.com/onsi/ginkgo/v2/ginkgo@latest && \
        go install github.com/axw/gocov/gocov@latest

    FROM src

    COPY --from=builder /go/bin/ginkgo /usr/bin/ginkgo
    COPY --from=builder /go/bin/gocov /usr/bin/gocov

    RUN yum -y install httpd-tools jq

    # Install kubectl
    RUN KUBECTL_VERSION=1.24.3 && \
        curl -LO https://storage.googleapis.com/kubernetes-release/release/v$KUBECTL_VERSION/bin/linux/amd64/kubectl && \
        chmod +x ./kubectl && mv ./kubectl /usr/local/bin && \
        kubectl version --client=true

    # Install ko
    RUN KO_VERSION=0.15.0 OS=Linux ARCH=x86_64 && \
        curl -sSfL "https://github.com/ko-build/ko/releases/download/v${KO_VERSION}/ko_${KO_VERSION}_${OS}_${ARCH}.tar.gz" > ko.tar.gz && \
        tar xzf ko.tar.gz ko && chmod +x ./ko && mv ./ko /usr/local/bin
  from: src
  to: src-kubectl
promotion:
  name: "4.14"
  namespace: ocp
releases:
  initial:
    integration:
      name: "4.14"
      namespace: ocp
  latest:
    integration:
      include_built_images: true
      name: "4.14"
      namespace: ocp
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: unit
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h0m0s
    version: "4.14"
  steps:
    test:
    - as: test-unit
      cli: latest
      commands: |
        export IMAGE_HOST=quay.io IMAGE_NAMESPACE=piteam_openshiftci \
          TEST_IMAGE_REPO=quay.io/piteam_openshiftci/build-unit GO_ARCH=amd64
        mkdir -p ${HOME}/.docker
        cp /tmp/secret/.dockerconfigjson ${HOME}/.docker/config.json
        echo "------------------------------install-tekton------------------------------"
        oc apply -f - <<EOF
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: openshift-pipelines-operator
          namespace: openshift-operators
        spec:
          channel: latest
          name: openshift-pipelines-operator-rh
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        EOF
        sleep 10
        echo "------------------------------install-controller------------------------------"
        make install-controller
        oc --namespace shipwright-build adm policy add-scc-to-user privileged -z shipwright-build-controller
        oc --namespace shipwright-build adm policy add-scc-to-user privileged -z shipwright-build-webhook
        oc --namespace shipwright-build rollout restart deployment/shipwright-build-controller
        oc --namespace shipwright-build rollout restart deployment/shipwright-build-webhook
        sleep 10
        echo "------------------------------setup-webhook------------------------------"
        sh hack/setup-webhook-cert.sh
        echo "------------------------------install-strategies------------------------------"
        oc new-project test-shipwright
        make install-strategies
        echo "------------------------------run-unit-tests------------------------------"
        make test
      credentials:
      - mount_path: /tmp/secret/
        name: dockerconfigjsonnew
        namespace: test-credentials
      from: src-kubectl
      resources:
        requests:
          cpu: 200m
    workflow: generic-claim
- as: e2e
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h0m0s
    version: "4.14"
  steps:
    test:
    - as: test-e2e
      cli: latest
      commands: |
        export IMAGE_HOST=quay.io IMAGE_NAMESPACE=piteam_openshiftci \
          TEST_IMAGE_REPO=quay.io/piteam_openshiftci/build-e2e GO_ARCH=amd64
        mkdir -p ${HOME}/.docker
        cp /tmp/secret/.dockerconfigjson ${HOME}/.docker/config.json
        echo "------------------------------install-tekton------------------------------"
        oc apply -f - <<EOF
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: openshift-pipelines-operator
          namespace: openshift-operators
        spec:
          channel: latest
          name: openshift-pipelines-operator-rh
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        EOF
        sleep 10
        echo "------------------------------install-controller------------------------------"
        make install-controller
        oc --namespace shipwright-build adm policy add-scc-to-user privileged -z shipwright-build-controller
        oc --namespace shipwright-build adm policy add-scc-to-user privileged -z shipwright-build-webhook
        oc --namespace shipwright-build rollout restart deployment/shipwright-build-controller
        oc --namespace shipwright-build rollout restart deployment/shipwright-build-webhook
        sleep 10
        echo "------------------------------setup-webhook------------------------------"
        sh hack/setup-webhook-cert.sh
        echo "------------------------------install-strategies------------------------------"
        oc login -u kubeadmin -p `cat ${KUBEADMIN_PASSWORD_FILE}` --insecure-skip-tls-verify
        # oc project default
        oc new-project test-e2e
        oc adm policy add-scc-to-user privileged -z pipeline
        # oc create secret docker-registry registry-credential --docker-server=quay.io --docker-username=piteam_openshiftci+openshift_ci --docker-password=`cat /tmp/secret/password.secrets.sh`
        oc create secret docker-registry registry-credential --docker-server=image-registry.openshift-image-registry.svc:5000 --docker-username=kubeadmin --docker-password=`oc whoami -t`
        echo "checking secret: to be removed"
        oc get secret registry-credential -oyaml
        make install-strategies
        echo "------------------------------run-e2e-tests------------------------------"
        # make TEST_IMAGE_REPO_SECRET=registry-credential test-e2e
        oc create imagestream e2e-repo
        echo "list is"
        oc get is
        make TEST_NAMESPACE=test-e2e TEST_IMAGE_REPO=image-registry.openshift-image-registry.svc:5000/test-e2e/e2e-repo test-e2e
      credentials:
      - mount_path: /tmp/secret
        name: dockerconfigjsonnew
        namespace: test-credentials
      from: src-kubectl
      resources:
        requests:
          cpu: 200m
    workflow: generic-claim
- as: test-integration
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h0m0s
    version: "4.14"
  steps:
    test:
    - as: test-integration
      cli: latest
      commands: |
        export IMAGE_HOST=quay.io IMAGE_NAMESPACE=piteam_openshiftci\
          TEST_IMAGE_REPO=quay.io/piteam_openshiftci/build-integration GO_ARCH=amd64
        echo "------------------------------setup-creds------------------------------"
        mkdir -p ${HOME}/.docker
        cat /tmp/secret/.dockerconfigjson
        cp /tmp/secret/.dockerconfigjson ${HOME}/.docker/config.json
        # oc new-project test-shipwright
        oc project default
        oc adm policy add-scc-to-user privileged -z pipeline
        oc create secret docker-registry registry-credential --docker-server=quay.io --docker-username=piteam_openshiftci+openshift_ci --docker-password=`cat /tmp/secret/password.secrets.sh`
        echo "------------------------------run-integration-tests------------------------------"
        make TEST_IMAGE_REPO_SECRET=registry-credential test-integration
      credentials:
      - mount_path: /tmp/secret
        name: dockerconfigjsonnew
        namespace: test-credentials
      from: src-kubectl
      resources:
        requests:
          cpu: 200m
    workflow: generic-claim
zz_generated_metadata:
  branch: main
  org: shipwright-io
  repo: build
